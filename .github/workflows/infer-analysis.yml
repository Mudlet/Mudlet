name: 🔍 Check improvements with Infer

on:
# temporary debug
  pull_request:
  pull_request_target:
  #  commented out for debugging
    # paths:
    # - '**.cpp'
    # - '**.h'
  workflow_dispatch:

jobs:
  compile-mudlet:
    name: ${{matrix.buildname}}
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            buildname: '(takes a while, can merge without me)'
            triplet: x64-linux
            compiler: clang_64
            qt: '5.14.1'

    env:
      BOOST_ROOT: ${{github.workspace}}/3rdparty/boost
      BOOST_URL: https://sourceforge.net/projects/boost/files/boost/1.72.0/boost_1_72_0.tar.bz2/download

    steps:
    - name: Checkout Mudlet source code
      uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0
        # https://github.com/ZedThree/clang-tidy-review/issues/10
        ref: ${{ github.event.pull_request.head.sha }}
        # https://github.community/t/github-actions-are-severely-limited-on-prs/18179/17?u=vadi2
        repository: ${{github.event.pull_request.head.repo.full_name}}

    - name: Restore Qt cache
      uses: actions/cache@v2.1.7
      id: cache-qt
      with:
        path: ${{github.workspace}}/Qt/${{matrix.qt}}
        key: ${{matrix.os}}-qt-${{matrix.qt}}-cache

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{matrix.qt}}
        dir: ${{github.workspace}}
        cached: ${{steps.cache-qt.outputs.cache-hit}}
        aqtversion: '==1.1.2'

    - name: Restore Boost cache
      uses: actions/cache@v2.1.7
      id: cache-boost
      with:
        path: ${{env.BOOST_ROOT}}
        key: boost

    - name: Install Boost
      if: steps.cache-boost.outputs.cache-hit != 'true'
      run: |
        if [ "$OS" == "Windows_NT" ]; then
          # fix up paths to be forward slashes consistently
          BOOST_ROOT=$(echo $BOOST_ROOT | sed 's/\\/\//g')
        fi
        mkdir -p $BOOST_ROOT
        curl --progress-bar --location --output $BOOST_ROOT/download.tar.bz2 $BOOST_URL
        7z -o$BOOST_ROOT x $BOOST_ROOT/download.tar.bz2 -y -bd
        7z -o$BOOST_ROOT x $BOOST_ROOT/download.tar -y -bd
        cd $BOOST_ROOT && cp -r boost_*/* .
        rm -rf boost_*/* download.tar.bz2 download.tar
      shell: bash

    # workaround a poor interaction between github actions/cmake/vcpkg, see https://github.com/lukka/run-vcpkg/issues/88#issuecomment-885758902
    - name: Use CMake 3.20.1
      uses: lukka/get-cmake@v3.20.1

    # Restore from cache the previously built ports. If "cache miss", then provision vcpkg, install desired ports, finally cache everything for the next run.
    - name: Restore from cache and run vcpkg
      uses: lukka/run-vcpkg@v7
      env:
        vcpkgResponseFile: ${{github.workspace}}/3rdparty/our-vcpkg-dependencies/vcpkg-${{matrix.triplet}}-dependencies
      with:
        vcpkgArguments: '@${{env.vcpkgResponseFile}}'
        vcpkgDirectory: '${{github.workspace}}/3rdparty/vcpkg'
        appendedCacheKey: ${{hashFiles(env.vcpkgResponseFile)}}-cachekey

    - name: (Linux) Install non-vcpkg dependencies
      if: runner.os == 'Linux'
      run: |
        # Install from vcpkg everything we can for cross-platform consistency
        # If not available, use other methods
        sudo apt-get install pkg-config libzip-dev libglu1-mesa-dev libpulse-dev -y

        echo "Skipping generation of translation stats, so not installing lua-yajl."

    - name: Setup Infer
      uses: srz-zumix/setup-infer@v1

    - name: Build Mudlet
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{github.workspace}}/CMakeLists.txt'
        useVcpkgToolchainFile: true
        buildDirectory: '${{runner.workspace}}/b/ninja'
        # enable for a debug build (1/2)
        # buildWithCMakeArgs: --config RelWithDebInfo
        cmakeAppendedArgs: >-
          -G Ninja
          -DCMAKE_PREFIX_PATH=${{env.MINGW_BASE_DIR}}
          -DVCPKG_APPLOCAL_DEPS=OFF
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      env:
        NINJA_STATUS: '[%f/%t %o/sec] '

    - name: Infer
      run: |
          git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > ${{runner.workspace}}/b/ninja/index.txt

          cd '${{runner.workspace}}/b/ninja'

          infer capture --progress-bar-style plain --keep-going --jobs $(nproc) --compilation-database compile_commands.json
          infer analyze --progress-bar-style plain --keep-going --jobs $(nproc) --changed-files-index index.txt

    - name: Check Infer report
      uses: srz-zumix/reviewdog-action-infer@v1
      with:
        report_path: '${{runner.workspace}}/b/ninja/infer-out'
        reporter: github-pr-review

    - name: Setup tmate session
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3
      timeout-minutes: 15
