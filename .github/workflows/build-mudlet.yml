name: Build Mudlet
on:
  - pull_request
  - push

jobs:
  compile-mudlet:
    name: ${{matrix.buildname}}
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            buildname: 'ubuntu'
            triplet: x64-linux
            compiler: gcc_64
          - os: macos-latest
            buildname: 'macos / C++ tests'
            triplet: x64-osx
            compiler: clang_64
          - os: windows-latest
            buildname: 'windows'
            triplet: x64-mingw-dynamic
            compiler: win64_mingw73
    env:
      qt: "5.14.1"

    steps:
    - name: Restore Qt cache
      uses: actions/cache@v2
      id: cache-qt
      with:
        path: ${{runner.workspace}}/Qt/${{env.qt}}
        key: ${{runner.os}}-qt-${{env.qt}}
        restore-keys: |
          ${{runner.os}}-qt-

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      if: steps.cache-qt.outputs.cache-hit != 'true'
      with:
        version: ${{env.qt}}
        dir: ${{runner.workspace}}
        arch: win64_mingw73 # this key is relevant only for windows
        cached: ${{steps.cache-qt.outputs.cache-hit}}

    - name: Checkout Mudlet source code
      uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0

    - name: (macOS) Install homebrew dependencies
      if: runner.os == 'macOS'
      run: |
        # these aren't available or don't work well in vcpkg
        brew install pkg-config libzzip libzip

    - name: (Linux) Install apt dependencies
      if: runner.os == 'Linux'
      run: |
        # Installing packages might fail as the github image becomes outdated
        sudo apt update
        # These aren't available or don't work well in vcpkg
        sudo apt install pkg-config libzip-dev libglu1-mesa-dev libpulse-dev libxkbcommon-x11-0 libqt5x11extras5
    - name: (Windows) Install boost dependency
      if: runner.os == 'Windows'
      run: |
        $env:WORKING_BASE_DIR = "${{runner.workspace}}\src"
        echo "WORKING_BASE_DIR has been set to $env:WORKING_BASE_DIR"
        . ${{github.workspace}}\CI\appveyor.functions.ps1
        $env:MINGW_BASE_DIR = "${{runner.workspace}}\mingw73_64"
        set-psdebug -trace 2
        SetQtBaseDir "$env:WORKING_BASE_DIR\verbose_output.log"
        SetMingwBaseDir "$env:WORKING_BASE_DIR\verbose_output.log"
        SetLuarocksPath "$env:WORKING_BASE_DIR\verbose_output.log"
        InstallBoost "${{github.workspace}}"
        InstallLibzip
        InstallZlib
      shell: powershell

    # Restore from cache the previously built ports. If "cache miss", then provision vcpkg, install desired ports, finally cache everything for the next run.
    - name: Restore from cache and run vcpkg
      uses: lukka/run-vcpkg@v5
      env:
        vcpkgResponseFile: ${{github.workspace}}/3rdparty/our-vcpkg-dependencies/vcpkg-${{matrix.triplet}}-dependencies
      with:
        vcpkgArguments: '@${{env.vcpkgResponseFile}}'
        vcpkgDirectory: '${{github.workspace}}/3rdparty/vcpkg'
        appendedCacheKey: ${{hashFiles(env.vcpkgResponseFile)}}-newkey

    - name: Build Mudlet
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{github.workspace}}/CMakeLists.txt'
        useVcpkgToolchainFile: true
        buildDirectory: '${{runner.workspace}}/b/ninja'
        cmakeAppendedArgs: --target test -G Ninja -DCMAKE_PREFIX_PATH=${{runner.workspace}}/Qt/${{env.qt}}/${{matrix.compiler}}/

    - name: Run C++ tests (macOS)
      if: runner.os == 'macOS'
      working-directory: '${{runner.workspace}}/b/ninja'
      run: ctest --output-on-failure

    - name: (windows) Show error logs
      if: failure() && runner.os == 'Windows'
      run: |
        $env:WORKING_BASE_DIR = "${{runner.workspace}}\src"
        echo "Standard error log: "
        cat $env:WORKING_BASE_DIR\stderr.log
        echo "Standard output log: "
        cat $env:WORKING_BASE_DIR\stdout.log
