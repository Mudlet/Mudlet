name: Build Mudlet
on:
  push:
    branches: [master, development]
  pull_request:
  workflow_dispatch:

jobs:
  compile-mudlet:
    name: ${{matrix.buildname}}
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          # oldest OS supported for maximum compatibility of built AppImage
          - os: ubuntu-16.04
            buildname: 'ubuntu / gcc'
            triplet: x64-linux
            compiler: gcc_64
            qt: '5.14.1'
            deploy: 'deploy'
          - os: ubuntu-latest
            buildname: 'ubuntu / clang'
            triplet: x64-linux
            compiler: clang_64
            qt: '5.14.1'
          - os: ubuntu-latest
            buildname: 'ubuntu / qt 5.11'
            triplet: x64-linux
            compiler: gcc_64
            qt: '5.11.0'
          - os: macos-latest
            buildname: 'macos / c++ tests'
            triplet: x64-osx
            compiler: clang_64
            qt: '5.14.1'
            deploy: 'deploy'
          - os: windows-2019
            buildname: 'windows'
            triplet: x64-mingw-dynamic
            # compiler: flag not used in windows pipeline
            qt: '5.14.1'
            deploy: 'deploy'

    steps:
    - name: Restore Qt cache
      uses: actions/cache@v2
      # 5.11 cache restoration goes awry
      if: matrix.qt != '5.11.0'
      id: cache-qt
      with:
        path: ${{runner.workspace}}/Qt/${{matrix.qt}}
        key: ${{matrix.os}}-qt-${{matrix.qt}}

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{matrix.qt}}
        dir: ${{runner.workspace}}
        arch: win64_mingw73 # this key is relevant only for windows
        cached: ${{steps.cache-qt.outputs.cache-hit}}

    - name: Checkout Mudlet source code
      uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0

    # Restore from cache the previously built ports. If "cache miss", then provision vcpkg, install desired ports, finally cache everything for the next run.
    - name: Restore from cache and run vcpkg
      uses: lukka/run-vcpkg@v5
      env:
        vcpkgResponseFile: ${{github.workspace}}/3rdparty/our-vcpkg-dependencies/vcpkg-${{matrix.triplet}}-dependencies
      with:
        vcpkgArguments: '@${{env.vcpkgResponseFile}}'
        vcpkgDirectory: '${{github.workspace}}/3rdparty/vcpkg'
        appendedCacheKey: ${{hashFiles(env.vcpkgResponseFile)}}-newkey

    - name: (macOS) Install non-vcpkg dependencies
      if: runner.os == 'macOS'
      run: |
        # these aren't available or don't work well in vcpkg
        brew install pkg-config libzzip libzip ccache

        echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
        echo "CCACHE_DIR=${{runner.workspace}}/ccache" >> $GITHUB_ENV

    - name: (Linux) Install non-vcpkg dependencies
      if: runner.os == 'Linux'
      run: |
        # Install from vcpkg everything we can for cross-platform consistency
        # If not available, use other methods
        sudo apt-get install ccache pkg-config pcregrep luarocks libzip-dev libglu1-mesa-dev libpulse-dev -y

        # multiple versions of GCC available in Actions - update to latest
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 9
        sudo update-alternatives --set gcc /usr/bin/gcc-9
        sudo update-alternatives --set g++ /usr/bin/g++-9

        echo "CCACHE_DIR=${{runner.workspace}}/ccache" >> $GITHUB_ENV

    - name: (Windows) Install non-vcpkg dependencies
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        # Use pre-installed Boost
        echo "BOOST_ROOT=$env:BOOST_ROOT_1_72_0" >> $env:GITHUB_ENV

        # Install dependencies not available on machine
        $env:WORKING_BASE_DIR = "${{runner.workspace}}\src"
        $env:MINGW_BASE_DIR = "${{runner.workspace}}\mingw73_64"
        echo "MINGW_BASE_DIR=$env:MINGW_BASE_DIR" >> $env:GITHUB_ENV
        . ${{github.workspace}}\CI\appveyor.functions.ps1

        # Libzip install complains when \bin is missing
        New-Item -ItemType Directory -Path "$env:MINGW_BASE_DIR\bin"

        SetQtBaseDir "$env:WORKING_BASE_DIR\verbose_output.log"
        SetMingwBaseDir "$env:WORKING_BASE_DIR\verbose_output.log"
        SetLuarocksPath "$env:WORKING_BASE_DIR\verbose_output.log"
        $NoShPath = filterPathForSh

        CheckAndInstallZlib
        CheckAndInstallLibzip

    - name: (Linux Clang) change compiler
      if: runner.os == 'Linux' && matrix.compiler == 'clang_64'
      run: |
         echo "CXX=clang++" >> $GITHUB_ENV
         echo "CC=clang" >> $GITHUB_ENV

    - name: (Qt 5.11) disable optional components
      if: matrix.qt == '5.11.0'
      run: |
        echo "WITH_UPDATER=no" >> $GITHUB_ENV
        echo "WITH_3DMAPPER=no" >> $GITHUB_ENV
        echo "WITH_FONTS=no" >> $GITHUB_ENV

    - name: (Linux/macOS) restore ccache
      uses: actions/cache@v2
      with:
        path: ${{runner.workspace}}/ccache
        key: ccache-${{matrix.os}}-${{matrix.compiler}}-${{matrix.qt}}-${{github.sha}}
        restore-keys: ccache-${{matrix.os}}-${{matrix.compiler}}-${{matrix.qt}}-
      if: matrix.os != 'windows-latest'

    - name: (Linux/macOS) Set build info
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: |
        ${{github.workspace}}/CI/travis.validate_deployment.sh
        ${{github.workspace}}/CI/travis.set-build-info.sh

    - name: Build Mudlet
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{github.workspace}}/CMakeLists.txt'
        useVcpkgToolchainFile: true
        buildDirectory: '${{runner.workspace}}/b/ninja'
        cmakeAppendedArgs: >-
          --target test
          -G Ninja
          -DCMAKE_PREFIX_PATH=${{env.MINGW_BASE_DIR}}
          -DVCPKG_APPLOCAL_DEPS=OFF
      env:
        NINJA_STATUS: '[%f/%t %o/sec] '

    - name: Run C++ tests (macOS)
      if: runner.os == 'macOS'
      working-directory: '${{runner.workspace}}/b/ninja'
      run: ctest --output-on-failure

    - name: (Linux/macOS) restore Luarocks for packaging
      uses: actions/cache@v2
      with:
        path: $HOME/.luarocks
        key: ccache-${{matrix.os}}-${{matrix.compiler}}-${{hashFiles('.github/workflows/build-mudlet.yml')}}
        restore-keys: ccache-${{matrix.os}}-${{matrix.compiler}}-
      if: runner.os == 'Linux' || runner.os == 'macOS'

    - name: (Linux) package Mudlet
      if: runner.os == 'Linux' && matrix.deploy == 'deploy'
      run: |
        export PATH="${{env.VCPKG_ROOT}}/installed/x64-linux/tools/lua:$PATH"

        luarocks install --local LuaFileSystem
        luarocks install --local luautf8
        luarocks install --local lua-zip
        luarocks install --local LuaSQL-SQLite3 SQLITE_INCDIR="${{env.VCPKG_ROOT}}/installed/x64-linux/include"
        luarocks install --local lrexlib-pcre

        # workaround https://github.com/lloyd/yajl/issues/209
        mv ${{env.VCPKG_ROOT}}/installed/x64-linux/lib/libyajl_s.a ${{env.VCPKG_ROOT}}/installed/x64-linux/lib/libyajl.a
        mv ${{env.VCPKG_ROOT}}/installed/x64-linux/debug/lib/libyajl_s.a ${{env.VCPKG_ROOT}}/installed/x64-linux/debug/lib/libyajl.a
        # Rock locations search is hardcoded to -L/usr/local/lib and not adjustable
        export LIBRARY_PATH="${{env.VCPKG_ROOT}}/installed/x64-linux/lib:$LIBRARY_PATH"
        # LUA_INCDIR needs to be passed as well due to https://github.com/luarocks/luarocks/issues/1239
        luarocks install --local lua-yajl YAJL_INCDIR="${{env.VCPKG_ROOT}}/installed/x64-linux/include"         YAJL_LIBDIR="${{env.VCPKG_ROOT}}/installed/x64-linux/lib" LUA_INCDIR="${{env.VCPKG_ROOT}}/installed/x64-linux/include"

        # CI changelog generation dependencies
        luarocks install --local argparse
        luarocks install --local lunajson

        # necessary for Qt multimedia
        sudo apt-get install libgstreamer-plugins-base1.0-0 -y

        ${{github.workspace}}/CI/travis.after_success.sh
      env:
        BUILD_FOLDER: ${{runner.workspace}}/b/ninja
        RUNNER_OS: ${{runner.os}}
        DEPLOY: ${{matrix.deploy}}

    - name: Upload packaged Mudlet
      uses: actions/upload-artifact@v2
      if: env.UPLOAD_FILENAME
      with:
        name: ${{env.UPLOAD_FILENAME}}
        path: ${{env.FOLDER_TO_UPLOAD}}

    - name: Submit to make.mudlet.org
      if: env.UPLOAD_FILENAME
      run: curl -X POST "https://make.mudlet.org/snapshots/gha_queue.php?artifact_name=${{env.UPLOAD_FILENAME}}&unzip=1"
      shell: bash

    - name: (windows) Show relevant logs logs
      if: failure() && runner.os == 'Windows'
      run: |
        $env:WORKING_BASE_DIR = "${{runner.workspace}}\src"
        if (Test-Path -Path "$env:WORKING_BASE_DIR\stderr.log") {
          echo "Standard error log from non-vcpkg dependencies: "
          cat $env:WORKING_BASE_DIR\stderr.log
        }
        if (Test-Path -Path "$env:WORKING_BASE_DIR\stdout.log") {
          echo "Standard output log from non-vcpkg dependencies: "
          cat $env:WORKING_BASE_DIR\stdout.log
        }
        if (Test-Path -Path "${{runner.workspace}}/b/ninja/CMakeFiles/CMakeOutput.log") {
          echo "CMakeOutput.log: "
          cat "${{runner.workspace}}/b/ninja/CMakeFiles/CMakeOutput.log"
        }
