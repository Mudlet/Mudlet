name: Build Mudlet
on:
  push:
    branches: [master, development]
  pull_request:

jobs:
  compile-mudlet:
    name: ${{matrix.buildname}}
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          # - os: windows-latest
          #   triplet: x64-windows
          - os: ubuntu-latest
            buildname: 'ubuntu / gcc'
            triplet: x64-linux
            compiler: gcc_64
            qt: '5.14.1'
          - os: ubuntu-latest
            buildname: 'ubuntu / clang'
            triplet: x64-linux
            compiler: clang_64
            qt: '5.14.1'
          - os: ubuntu-latest
            buildname: 'ubuntu / qt 5.11'
            triplet: x64-linux
            compiler: gcc_64
            qt: '5.11.0'
          - os: macos-latest
            buildname: 'macos / c++ tests'
            triplet: x64-osx
            compiler: clang_64
            qt: '5.14.1'

    steps:
    - name: Restore Qt cache
      uses: actions/cache@v2
      # 5.11 cache restoration goes awry
      if: matrix.qt != '5.11.0'
      id: cache-qt
      with:
        path: ${{runner.workspace}}/Qt/${{matrix.qt}}
        key: ${{matrix.os}}-qt-${{matrix.qt}}

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{matrix.qt}}
        dir: ${{runner.workspace}}
        arch: win64_mingw73 # this key is relevant only for windows
        cached: ${{steps.cache-qt.outputs.cache-hit}}

    - name: Checkout Mudlet source code
      uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0

    - name: (macOS) Install homebrew dependencies
      if: runner.os == 'macOS'
      run: |
        # these aren't available or don't work well in vcpkg
        brew install pkg-config libzzip libzip ccache

        echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
        echo "CCACHE_DIR=${{runner.workspace}}/ccache" >> $GITHUB_ENV

    - name: (Linux) Install apt dependencies
      if: runner.os == 'Linux'
      run: |
        # Installing packages might fail as the github image becomes outdated
        sudo apt update
        # These aren't available or don't work well in vcpkg
        sudo apt install ccache pkg-config libzip-dev libglu1-mesa-dev libpulse-dev

        echo "CCACHE_DIR=${{runner.workspace}}/ccache" >> $GITHUB_ENV

    - name: (Linux Clang) change compiler
      if: runner.os == 'Linux' && matrix.compiler == 'clang_64'
      run: |
         echo "CXX=clang++" >> $GITHUB_ENV
         echo "CC=clang" >> $GITHUB_ENV

    - name: (Qt 5.11) disable optional components
      if: matrix.qt == '5.11.0'
      run: |
        echo "WITH_UPDATER=no" >> $GITHUB_ENV
        echo "WITH_3DMAPPER=no" >> $GITHUB_ENV
        echo "WITH_FONTS=no" >> $GITHUB_ENV

    - name: (Linux/macOS) restore ccache
      uses: actions/cache@v2
      with:
        path: ${{runner.workspace}}/ccache
        key: ccache-${{matrix.os}}-${{matrix.compiler}}-${{matrix.qt}}-${{github.sha}}
        restore-keys: ccache-${{matrix.os}}-${{matrix.compiler}}-${{matrix.qt}}-
      if: matrix.os != 'windows-latest'

    # Restore from cache the previously built ports. If "cache miss", then provision vcpkg, install desired ports, finally cache everything for the next run.
    - name: Restore from cache and run vcpkg
      uses: lukka/run-vcpkg@v5
      env:
        vcpkgResponseFile: ${{github.workspace}}/3rdparty/our-vcpkg-dependencies/vcpkg-${{matrix.triplet}}-dependencies
      with:
        vcpkgArguments: '@${{env.vcpkgResponseFile}}'
        vcpkgDirectory: '${{github.workspace}}/3rdparty/vcpkg'
        appendedCacheKey: ${{hashFiles(env.vcpkgResponseFile)}}-newkey

    - name: Build Mudlet
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{github.workspace}}/CMakeLists.txt'
        useVcpkgToolchainFile: true
        buildDirectory: '${{runner.workspace}}/b/ninja'
        cmakeAppendedArgs: '--target test -G Ninja'

    - name: Run C++ tests (macOS)
      if: runner.os == 'macOS'
      working-directory: '${{runner.workspace}}/b/ninja'
      run: ctest --output-on-failure
