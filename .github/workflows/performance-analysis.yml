name: "Performance analysis"

on:
  push:
  #  branches: [development, main]
  schedule:
    - cron: '0 7 * * 3'
  workflow_dispatch:

jobs:
  analyze:
    name: ${{matrix.buildname}}
    runs-on: ${{matrix.os}}

    strategy:
      fail-fast: false
      matrix:
        include:
          - buildname: 'pi'
            qt: '5.14.2'
            triplet: arm64-linux
            compiler: gcc_64
            os: [ self-hosted, pi4 ]

    env:
      BOOST_ROOT: ${{github.workspace}}/3rdparty/boost
      BOOST_URL: https://sourceforge.net/projects/boost/files/boost/1.77.0/boost_1_77_0.tar.bz2/download


    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true

    - name: Restore ccache
      uses: pat-s/always-upload-cache@v3.0.1
      with:
        path: ${{runner.workspace}}/ccache
        key: ccache-${{matrix.os}}-${{matrix.compiler}}-${{matrix.qt}}-${{ github.sha }}
        restore-keys: ccache-${{matrix.os}}-${{matrix.compiler}}-${{matrix.qt}}

      # run-vcpkg action does not run on arm64 (https://github.com/lukka/run-vcpkg/issues/152)
      # so install dependencies manually
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install build-essential git liblua5.1-dev zlib1g-dev libhunspell-dev libpcre3-dev \
          libzip-dev libboost-graph-dev libyajl-dev libpulse-dev lua-rex-pcre lua-filesystem lua-zip \
          lua-sql-sqlite3 qtmultimedia5-dev qttools5-dev luarocks ccache libpugixml-dev cmake -y

        # switch to GCC that supports C++17 while retaining support for older OS's
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 7
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 7
        sudo update-alternatives --set gcc /usr/bin/gcc-7
        sudo update-alternatives --set g++ /usr/bin/g++-7

        echo "CCACHE_DIR=${{runner.workspace}}/ccache" >> $GITHUB_ENV

        sudo luarocks install luautf8  
        sudo luarocks install lua-yajl YAJL_LIBDIR=`find /usr -name "libyajl.so" -printf '%h\n'` YAJL_INCDIR=/usr/include

    - name: Set build info
      run: |
        ${{github.workspace}}/CI/travis.validate_deployment.sh
        ${{github.workspace}}/CI/travis.set-build-info.sh

    - name: Check ccache stats prior to build
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: ccache --zero-stats --show-stats

    - name: Build Mudlet
      run : |
        WITH_UPDATER=NO WITH_3DMAPPER=NO qmake ../src/mudlet.pro
        make -j $(expr `nproc` - 1)

    - name: Check ccache stats post build
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: ccache --show-stats