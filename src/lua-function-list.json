{
    "addAreaName": "areaID = addAreaName(areaName)",
    "addCustomLine": "addCustomLine(roomID, id_to, direction, style, color, arrow)",
    "addMapEvent": "addMapEvent(uniquename, event name, parent, display name, arguments)",
    "addMapMenu": "addMapMenu(uniquename, parent, display name)",
    "addRoom": "addRoom(roomID)",
    "addSpecialExit": "addSpecialExit(roomIDFrom, roomIDTo, moveCommand)",
    "addSupportedTelnetOption": "addSupportedTelnetOption(option)",
    "addWordToDictionary": "addWordToDictionary(word)",
    "adjustStopWatch": "adjustStopWatch(watchID/watchName, amount)",
    "alert": "alert([seconds])",
    "ansi2decho": "ansi2decho(text, default_colour)",
    "appendBuffer": "appendBuffer(name)",
    "appendCmdLine": "appendCmdLine()",
    "bg": "bg([window, ]colorName)",
    "calcFontSize": "calcFontSize(window_or_fontsize, [fontname])",
    "cecho": "cecho([window], text)",
    "cechoLink": "cechoLink([windowName], text, command, hint, true)",
    "cechoPopup": "cechoPopup([windowName], text, {commands}, {hints}, [useCurrentFormatElseDefault])",
    "centerview": "centerview (roomID)",
    "cinsertLink": "cinsertLink([windowName], text, command, hint, true)",
    "cinsertPopup": "cinsertPopup([windowName], text, {commands}, {hints}, [useCurrentFormatElseDefault])",
    "cinsertText": "cinsertText([window], text)",
    "clearAreaUserData": "clearAreaUserData(areaID)",
    "clearAreaUserDataItem": "clearAreaUserDataItem(areaID, key)",
    "clearCmdLine": "clearCmdLine()",
    "clearMapUserData": "clearMapUserData()",
    "clearMapUserDataItem": "clearUserDataItem(mapID, key)",
    "clearRoomUserData": "clearRoomUserData(roomID)",
    "clearRoomUserDataItem": "clearRoomUserDataItem(roomID, key)",
    "clearSpecialExits": "clearSpecialExits(roomID)",
    "clearUserWindow": "clearUserWindow(name)",
    "clearWindow": "clearWindow([windowName])",
    "closeMapWidget": "closeMapWidget()",
    "closeMudlet": "closeMudlet()",
    "connectExitStub": "connectExitStub(fromID, direction) or connectExitStub(fromID, toID, [direction])",
    "connectToServer": "connectToServer(host, port, [save])",
    "copy": "copy([windowName])",
    "copy2decho": "copy2decho([window], [stringToCopy], [instanceToCopy])",
    "copy2html": "copy2html([window], [stringToCopy], [instanceToCopy])",
    "createBuffer": "createBuffer(name)",
    "createConsole": "createConsole([name of userwindow], consoleName, fontSize, charsPerLine, numberOfLines, Xpos, Ypos)",
    "createGauge": "createGauge([name of userwindow], name, width, height, Xpos, Ypos, gaugeText, r, g, b, orientation)",
    "createLabel": "createLabel([name of userwindow], name, Xpos, Ypos, width, height, fillBackground, [enableClickthrough])",
    "createMapImageLabel": "labelID = createMapImageLabel(areaID, filePath, posx, posy, posz, width, height, zoom, showOnTop)",
    "createMapLabel": "labelID = createMapLabel(areaID, text, posx, posy, posz, fgRed, fgGreen, fgBlue, bgRed, bgGreen, bgBlue, zoom, fontSize, showOnTop, noScaling)",
    "createMapper": "createMapper([name of userwindow], x, y, width, height)",
    "createMiniConsole": "createMiniConsole([name of userwindow], name, x, y, width, height)",
    "createRoomID": "usableId = createRoomID([minimumStartingRoomId])",
    "createStopWatch": "createStopWatch()",
    "creplace": "creplace([window, ]text)",
    "creplaceLine": "creplaceLine (text)",
    "debugc": "debugc(content)",
    "decho": "decho ([name of console,] text)",
    "dechoLink": "dechoLink([windowName], text, command, hint, true)",
    "dechoPopup": "dechoPopup([windowName], text, {commands}, {hints}, [useCurrentFormatElseDefault])",
    "deleteArea": "deleteArea(areaID or areaName)",
    "deleteHTTP": "deleteHTTP(url, headersTable)",
    "deleteLabel": "deleteLabel(labelName)",
    "deleteLine": "deleteLine([windowName])",
    "deleteMapLabel": "deleteMapLabel(areaID, labelID)",
    "deleteRoom": "deleteRoom(roomID)",
    "deleteStopWatch": "deleteStopWatch(watchID/watchName)",
    "denyCurrentSend": "denyCurrentSend()",
    "deselect": "deselect([window name])",
    "dinsertLink": "dinsertLink([windowName], text, command, hint, true)",
    "dinsertPopup": "dinsertPopup([windowName], text, {commands}, {hints}, [useCurrentFormatElseDefault])",
    "disableAlias": "disableAlias(name)",
    "disableClickthrough": "disableClickthrough(label)",
    "disableKey": "disableKey(name)",
    "disableScrollBar": "disableScrollBar(windowName)",
    "disableTimer": "disableTimer(name)",
    "disableTrigger": "disableTrigger(name)",
    "disconnect": "disconnect()",
    "display": "display(content)",
    "downloadFile": "downloadFile(saveto, url)",
    "dreplace": "dreplace([window, ]text)",
    "echo": "echo([miniconsoleName or labelName], text)",
    "echoLink": "echoLink([windowName], text, command, hint, [useCurrentFormatElseDefault])",
    "echoPopup": "echoPopup([windowName], text, {commands}, {hints}, [useCurrentFormatElseDefault])",
    "echoUserWindow": "echoUserWindow(windowName)",
    "enableAlias": "enableAlias(name)",
    "enableClickthrough": "enableClickthrough(label)",
    "enableKey": "enableKey(name)",
    "enableScrollBar": "enableScrollBar(windowName)",
    "enableTimer": "enableTimer(name)",
    "enableTrigger": "enableTrigger(name)",
    "exists": "exists(name, type)",
    "expandAlias": "expandAlias(command, [echoBackToBuffer])",
    "exportAreaImage": "exportAreaImage(areaID)",
    "feedTriggers": "feedTriggers(text[, dataIsUtf8Encoded = true])",
    "fg": "fg([window], colorName)",
    "getAllAreaUserData": "dataTable = getAllAreaUserData(areaID)",
    "getAllMapUserData": "dataTable = getAllMapUserData()",
    "getAllRoomEntrances": "exitsTable = getAllRoomEntrances(roomID)",
    "getAllRoomUserData": "dataTable = getAllRoomUserData(roomID)",
    "getAreaExits": "roomTable = getAreaExits(areaID, showExits)",
    "getAreaRooms": "areaTable = getAreaRooms(area id)",
    "getAreaTable": "areaTable = getAreaTable()",
    "getAreaTableSwap": "areaTable = getAreaTableSwap()",
    "getAreaUserData": "dataValue = getAreaUserData(areaID, key)",
    "getAvailableFonts": "fonts = getAvailableFonts()",
    "getBgColor": "r, g, b = getBgColor(windowName)",
    "getBorderBottom": "getBorderBottom()",
    "getBorderLeft": "getBorderLeft()",
    "getBorderRight": "getBorderRight()",
    "getBorderSizes": "getBorderSizes()",
    "getBorderTop": "getBorderTop()",
    "getButtonState": "getButtonState()",
    "getCmdLine": "getCmdLine()",
    "getColorWildcard": "AnsiNumber = getColorWildcard(ansi color number)",
    "getColumnCount": "columns = getColumnCount([windowName])",
    "getColumnNumber": "column = getColumnNumber([windowName])",
    "getCommandSeparator": "getCommandSeparator()",
    "getConnectionInfo": "getConnectionInfo()",
    "getCurrentLine": "content = getCurrentLine()",
    "getCustomEnvColorTable": "envcolors = getCustomEnvColorTable()",
    "getCustomLines": "lineTable = getCustomLines(roomID)",
    "getDictionaryWordList": "getDictionaryWordList()",
    "getDoors": "doors = getDoors(roomID)",
    "getEpoch": "seconds = getEpoch()",
    "getExitStubs": "stubs = getExitStubs(roomid)",
    "getExitStubs1": "stubs = getExitStubs1(roomid)",
    "getExitWeights": "weights = getExitWeights(roomid)",
    "getFgColor": "r, g, b = getFgColor(windowName)",
    "getFont": "font = getFont(windowName)",
    "getFontSize": "size = getFontSize(windowName)",
    "getGridMode": "TrueOrFalse = getGridMode(areaID)",
    "getImageSize": "width, height = getImageSize(imageLocation)",
    "getIrcChannels": "getIrcChannels()",
    "getIrcConnectedHost": "getIrcConnectedHost()",
    "getIrcNick": "getIrcNick()",
    "getIrcServer": "getIrcServer()",
    "getLastLineNumber": "line = getLastLineNumber(windowName)",
    "getLineCount": "amount = getLineCount()",
    "getLineNumber": "line = getLineNumber([windowName])",
    "getLines": "contents = getLines([windowName,] from_line_number, to_line_number)",
    "getMainConsoleWidth": "width = getMainConsoleWidth()",
    "getMainWindowSize": "width, height = getMainWindowSize()",
    "getMapEvents": "mapevents = getMapEvents()",
    "getMapLabel": "labelinfo = getMapLabels(areaID, labelID)",
    "getMapLabels": "arealabels = getMapLabels(areaID)",
    "getMapSelection": "getMapSelection()",
    "getMapUserData": "getMapUserData( key )",
    "getModulePath": "path = getModulePath(module name)",
    "getModulePriority": "priority = getModulePriority(module name)",
    "getMousePosition": "x, y = getMousePosition()",
    "getMudletHomeDir": "getMudletHomeDir()",
    "getMudletLuaDefaultPaths": "getMudletLuaDefaultPaths()",
    "getMudletVersion": "getMudletVersion(style)",
    "getNetworkLatency": "getNetworkLatency()",
    "getOS": "getOS()",
    "getPath": "getPath(roomID from, roomID to)",
    "getPlayerRoom": "roomID = getPlayerRoom()",
    "getProfileName": "getProfileName()",
    "getRoomArea": "areaID = getRoomArea(roomID)",
    "getRoomAreaName": "getRoomAreaName(areaID or areaName)",
    "getRoomChar": "getRoomChar(roomID)",
    "getRoomCoordinates": "x, y, z = getRoomCoordinates(room ID)",
    "getRoomEnv": "envID = getRoomEnv(roomID)",
    "getRoomExits": "getRoomExits (roomID)",
    "getRoomHashByID": "roomHash = getRoomHashByID(roomID)",
    "getRoomIDbyHash": "roomID = getRoomIDbyHash(hash)",
    "getRoomName": "roomName = getRoomName(roomID)",
    "getRooms": "rooms = getRooms()",
    "getRoomsByPosition": "roomTable = getRoomsByPosition(areaID, x,y,z)",
    "getRoomUserData": "dataText = getRoomUserData(roomID, key)",
    "getRoomUserDataKeys": "getRoomUserDataKeys(roomID)",
    "getRoomWeight": "room weight = getRoomWeight(roomID)",
    "getRowCount": "rows = getRowCount([windowName])",
    "getSelection": "text, start, length = getSelection([windowName])",
    "getServerEncoding": "getServerEncoding()",
    "getServerEncodingsList": "getServerEncodingsList()",
    "getSpecialExits": "exits = getSpecialExits(roomID)",
    "getSpecialExitsSwap": "exits = getSpecialExitsSwap(roomID)",
    "getStopWatchBrokenDownTime": "brokenDownTimeTable = getStopWatchBrokenDownTime(watchID or watchName)",
    "getStopWatches": "table = getStopWatches()",
    "getStopWatchTime": "time = getStopWatchTime(watchID [or watchName from Mudlet 4.4.0])",
    "getTextFormat": "getTextFormat([windowName])",
    "getTime": "time = getTime(returntype, format)",
    "getTimestamp": "time = getTimestamp([console_name], lineNumber)",
    "getUserWindowSize": "width, height = getUserWindowSize(windowName)",
    "getWindowsCodepage": "getWindowsCodepage()",
    "gotoRoom": "gotoRoom (roomID)",
    "handleWindowResizeEvent": "handleWindowResizeEvent()",
    "hasExitLock": "status = hasExitLock(roomID, direction)",
    "hasFocus": "hasFocus()",
    "hasSpecialExitLock": "status = hasSpecialExitLock(from roomID, to roomID, moveCommand)",
    "hecho": "hecho([windowName], text)",
    "hechoLink": "hechoLink([windowName], text, command, hint, true)",
    "hechoPopup": "hechoPopup([windowName], text, {commands}, {hints}, [useCurrentFormatElseDefault])",
    "hideToolBar": "hideToolBar(name)",
    "hideWindow": "hideWindow(name)",
    "highlightRoom": "highlightRoom( roomID, color1Red, color1Green, color1Blue, color2Red, color2Green, color2Blue, highlightRadius, color1Alpha, color2Alpha)",
    "hinsertLink": "hinsertLink([windowName], text, command, hint, true)",
    "hinsertPopup": "hinsertPopup([windowName], text, {commands}, {hints}, [useCurrentFormatElseDefault])",
    "hreplace": "hreplace([window, ]text)",
    "insertLink": "insertLink([windowName], text, command, hint, [useCurrentLinkFormat])",
    "insertPopup": "insertPopup([windowName], text, {commands}, {hints}, [useCurrentLinkFormat])",
    "insertText": "insertText([windowName], text)",
    "installModule": "installModule(location)",
    "installPackage": "installPackage(location)",
    "invokeFileDialog": "invokeFileDialog(fileOrFolder, dialogTitle)",
    "ioprint": "ioprint(text, some more text, ...)",
    "isActive": "isActive(name, type)",
    "isAnsiBgColor": "isAnsiBgColor(ansiBgColorCode)",
    "isAnsiFgColor": "isAnsiFgColor(ansiFgColorCode)",
    "isPrompt": "isPrompt()",
    "killAlias": "killAlias(aliasID)",
    "killAnonymousEventHandler": "killAnonymousEventHandler(handler id)",
    "killKey": "killKey(name)",
    "killTimer": "killTimer(id)",
    "killTrigger": "killTrigger(id)",
    "loadMap": "boolean = loadMap(file location)",
    "loadWindowLayout": "loadWindowLayout",
    "lockExit": "lockExit(roomID, direction, lockIfTrue)",
    "lockRoom": "lockRoom (roomID, lockIfTrue)",
    "lockSpecialExit": "lockSpecialExit (from roomID, to roomID, special exit command, lockIfTrue)",
    "lowerWindow": "lowerWindow(labelName)",
    "moveCursor": "moveCursor([windowName], x, y)",
    "moveCursorDown": "moveCursorDown([windowName,] [lines,] [keepHorizontal])",
    "moveCursorEnd": "moveCursorEnd([windowName])",
    "moveCursorUp": "moveCursorUp([windowName,] [lines,] [keepHorizontal])",
    "moveGauge": "moveGauge(gaugeName, newX, newY)",
    "moveMapWidget": "moveMapWidget(Xpos, Ypos)",
    "moveWindow": "moveWindow(name, x, y)",
    "mudletOlderThan": "mudletOlderThan(major, [minor], [patch])",
    "openMapWidget": "openMapWidget()",
    "openUrl": "openUrl (url)",
    "openUserWindow": "openUserWindow(windowName, [restoreLayout])",
    "openWebPage": "openWebPage(URL)",
    "paste": "paste(windowName)",
    "permAlias": "permAlias(name, parent, regex, lua code)",
    "permBeginOfLineStringTrigger": "permBeginOfLineStringTrigger(name, parent, pattern table, lua code)",
    "permGroup": "permGroup(name, itemtype, [parent])",
    "permKey": "permKey(name, parent, [modifier], key code, lua code)",
    "permPromptTrigger": "permPromptTrigger(name, parent, lua code)",
    "permRegexTrigger": "permRegexTrigger(name, parent, pattern table, lua code)",
    "permSubstringTrigger": "permSubstringTrigger( name, parent, pattern table, lua code )",
    "permTimer": "permTimer(name, parent, seconds, lua code)",
    "playSoundFile": "playSoundFile(fileName, volume)",
    "postHTTP": "postHTTP(dataToSend, url, headersTable, file)",
    "prefix": "prefix(text, [writingFunction], [foregroundColor], [backgroundColor], [windowName])",
    "print": "print(text, some more text, ...)",
    "printCmdLine": "printCmdLine(text)",
    "putHTTP": "putHTTP(dataToSend, url, headersTable, file)",
    "raiseEvent": "raiseEvent(event_name, arg-1, … arg-n)",
    "raiseGlobalEvent": "raiseGlobalEvent(event_name, arg-1, … arg-n)",
    "raiseWindow": "raiseWindow(labelName)",
    "receiveMSP": "receiveMSP(command)",
    "reconnect": "reconnect()",
    "registerAnonymousEventHandler": "id = registerAnonymousEventHandler(event name, functionReference, [one shot])",
    "reloadModule": "reloadModule(module name)",
    "remainingTime": "remainingTime(timer id number or name)",
    "removeCustomLine": "removeCustomLine(roomID, direction)",
    "removeMapEvent": "removeMapEvent (event name)",
    "removeSpecialExit": "removeSpecialExit(roomID, command)",
    "removeWordFromDictionary": "removeWordFromDictionary(word)",
    "replace": "replace([windowName], with, [keepcolor])",
    "replaceAll": "replaceAll(what, with)",
    "replaceWildcard": "replaceWildcard(which, replacement)",
    "resetFormat": "resetFormat()",
    "resetLabelCursor": "resetLabelCursor(labelName)",
    "resetLabelToolTip": "resetLabelToolTip(labelName)",
    "resetProfile": "resetProfile()",
    "resetProfileIcon": "resetProfileIcon()",
    "resetRoomArea": "resetRoomArea (areaID)",
    "resetStopWatch": "resetStopWatch(watchID)",
    "resizeMapWidget": "resizeMapWidget(width, height)",
    "resizeWindow": "resizeWindow(windowName, width, height)",
    "restartIrc": "restartIrc()",
    "roomExists": "roomExists(roomID)",
    "roomLocked": "locked = roomLocked(roomID)",
    "saveMap": "saveMap([location], [version])",
    "saveProfile": "saveProfile()",
    "saveWindowLayout": "saveWindowLayout",
    "searchAreaUserData": "searchRoom (room name / room number)",
    "searchRoomUserData": "searchRoomUserData(key, value)",
    "selectCaptureGroup": "selectCaptureGroup(groupNumber)",
    "selectCurrentLine": "selectCurrentLine([windowName])",
    "selectSection": "selectSection( [windowName], fromPosition, length )",
    "selectString": "selectString( [windowName], text, number_of_match )",
    "send": "send(command, showOnScreen)",
    "sendAll": "sendAll(list of things to send, [echo back or not])",
    "sendATCP": "sendATCP(message, what)",
    "sendGMCP": "sendGMCP(command)",
    "sendIrc": "sendIrc(target, message)",
    "sendMSDP": "sendMSDP(variable[, value][, value...])",
    "sendSocket": "sendSocket(data)",
    "sendTelnetChannel102": "sendTelnetChannel102(msg)",
    "setAppStyleSheet": "setAppStyleSheet(stylesheet [, tag])",
    "setAreaName": "setAreaName(areaID or areaName, newName)",
    "setAreaUserData": "setAreaUserData(areaID, key (as a string), value (as a string))",
    "setBackgroundColor": "setBackgroundColor([windowName], r, g, b, transparency)",
    "setBackgroundImage": "setBackgroundImage(labelName, imageLocation)",
    "setBgColor": "setBgColor([windowName], r, g, b)",
    "setBold": "setBold(windowName, boolean)",
    "setBorderBottom": "setBorderBottom(size)",
    "setBorderColor": "setBorderColor(red, green, blue)",
    "setBorderLeft": "setBorderLeft(size)",
    "setBorderRight": "setBorderRight(size)",
    "setBorderSizes": "setBorderSizes(top, right, bottom, left)",
    "setBorderTop": "setBorderTop(size)",
    "setButtonStyleSheet": "setButtonStyleSheet(button, markup)",
    "setConsoleBufferSize": "setConsoleBufferSize(consoleName, linesLimit, sizeOfBatchDeletion)",
    "setCustomEnvColor": "setCustomEnvColor(environmentID, r,g,b,a)",
    "setDoor": "setDoor(roomID, exitCommand, doorStatus)",
    "setExit": "setExit(from roomID, to roomID, direction)",
    "setExitStub": "setExitStub(roomID, direction, set/unset)",
    "setExitWeight": "setExitWeight(roomID, exitCommand, weight)",
    "setFgColor": "setFgColor([windowName], red, green, blue)",
    "setFont": "setFont(name, font)",
    "setFontSize": "setFontSize(name, size)",
    "setGauge": "setGauge(gaugeName, currentValue, maxValue, gaugeText)",
    "setGaugeStyleSheet": "setGaugeStyleSheet(gaugeName, css, cssback, csstext)",
    "setGaugeText": "setGaugeText(gaugename, css, ccstext )",
    "setGridMode": "setGridMode(areaID, true/false)",
    "setHexBgColor": "setHexBgColor([windowName], hexColorString)",
    "setHexFgColor": "setHexFgColor([windowName], hexColorString)",
    "setIrcChannels": "setIrcChannels(channels)",
    "setIrcNick": "setIrcNick(nickname)",
    "setIrcServer": "setIrcServer(hostname, port)",
    "setItalics": "setItalics(windowName, bool)",
    "setLabelClickCallback": "setLabelClickCallback(labelName, luaFunctionName, [any arguments])",
    "setLabelCursor": "setLabelCursor(labelName, cursorShape)",
    "setLabelCustomCursor": "setLabelCustomCursor(labelName, custom cursor, [hotX, hotY])",
    "setLabelDoubleClickCallback": "setLabelDoubleClickCallback(labelName, luaFunctionName, [any arguments])",
    "setLabelMoveCallback": "setLabelMoveCallback(labelName, luaFunctionName, [any arguments])",
    "setLabelOnEnter": "setLabelOnEnter(labelName, luaFunctionName, [any arguments])",
    "setLabelOnLeave": "setLabelClickCallback(labelName, luaFunctionName, [any arguments])",
    "setLabelReleaseCallback": "setLabelReleaseCallback(labelName, luaFunctionName, [any arguments])",
    "setLabelStyleSheet": "setLabelStyleSheet(label, markup)",
    "setLabelToolTip": "setLabelToolTip(labelName, [duration])",
    "setLabelWheelCallback": "setLabelWheelCallback(labelName, luaFunctionName, [any arguments])",
    "setLink": "setLink([windowName], command, tooltip)",
    "setMainWindowSize": "setMainWindowSize(mainWidth, mainHeight)",
    "setMapUserData": "setMapUserData(key (as a string), value (as a string))",
    "setMapZoom": "setMapZoom(zoom)",
    "setMergeTables": "setMergeTables(module)",
    "setMiniConsoleFontSize": "setMiniConsoleFontSize(name, fontSize)",
    "setModulePriority": "setModulePriority(moduleName, priority)",
    "setOverline": "setOverline([windowName], boolean)",
    "setPopup": "setPopup(windowName, {lua code}, {hints})",
    "setProfileIcon": "setProfileIcon(iconPath)",
    "setProfileStyleSheet": "setProfileStyleSheet(stylesheet)",
    "setReverse": "setReverse([windowName], boolean)",
    "setRoomArea": "setRoomArea(roomID, newAreaID or newAreaName)",
    "setRoomChar": "setRoomChar(roomID, character)",
    "setRoomCoordinates": "setRoomCoordinates(roomID, x, y, z)",
    "setRoomEnv": "setRoomEnv(roomID, newEnvID)",
    "setRoomIDbyHash": "setRoomIDbyHash(roomID, hash)",
    "setRoomName": "setRoomName(roomID, newName)",
    "setRoomUserData": "setRoomUserData(roomID, key (as a string), value (as a string))",
    "setRoomWeight": "setRoomWeight(roomID, weight)",
    "setServerEncoding": "setServerEncoding(encoding)",
    "setStopWatchName": "setStopWatchPersistence(watchID/currentStopWatchName, newStopWatchName)",
    "setStopWatchPersistence": "setStopWatchPersistence(watchID/watchName, state)",
    "setStrikeOut": "setStrikeOut([windowName], boolean)",
    "setTextFormat": "setTextFormat(windowName, r1, g1, b1, r2, g2, b2, bold, underline, italics, [strikeout], [overline], [reverse])",
    "setTriggerStayOpen": "setTriggerStayOpen(name, number)",
    "setUnderline": "setUnderline(windowName, bool)",
    "setWindow": "setWindow(windowName, name, [Xpos, Ypos, show])",
    "setWindowWrap": "setWindowWrap(windowName, wrapAt)",
    "shms": "shms(seconds, bool)",
    "showCaptureGroups": "showCaptureGroups()",
    "showColors": "showColors([columns], [filterColor], [sort])",
    "showMultimatches": "showMultimatches()",
    "showToolBar": "showToolBar(name)",
    "showWindow": "showWindow(name)",
    "spawn": "spawn(readFunction, processToSpawn[, ...arguments])",
    "speedwalk": "speedwalk(dirString, backwards, delay, show)",
    "spellCheckWord": "spellCheckWord(word, [customDictionary])",
    "spellSuggestWord": "spellSuggestWord(word, [customDictionary])",
    "startLogging": "startLogging(state)",
    "startStopWatch": "startStopWatch(watchID, [resetAndRestart])",
    "stopSounds": "stopSounds()",
    "stopStopWatch": "stopStopWatch(watchID or watchName)",
    "suffix": "suffix(text, [writingFunction], [foregroundColor], [backgroundColor], [windowName])",
    "tempAlias": "aliasID = tempAlias(regex, code to do)",
    "tempAnsiColorTrigger": "tempAnsiColorTrigger(foregroundColor, backgroundColor, code, expireAfter)",
    "tempBeginOfLineTrigger": "tempBeginOfLineTrigger(part of line, code, expireAfter)",
    "tempButton": "tempButton(toolbar name, button text, orientation)",
    "tempButtonToolbar": "tempButtonToolbar(name, location, orientation)",
    "tempColorTrigger": "tempColorTrigger(foregroundColor, backgroundColor, code, expireAfter)",
    "tempComplexRegexTrigger": "tempComplexRegexTrigger(name, regex, code, multiline, fg color, bg color, filter, match all, highlight fg color, highlight bg color, play sound file, fire length, line delta, expireAfter)",
    "tempExactMatchTrigger": "tempExactMatchTrigger(exact line, code, expireAfter)",
    "tempKey": "tempKey([modifier], key code, lua code)",
    "tempLineTrigger": "tempLineTrigger(from, howMany, code, expireAfter)",
    "tempPromptTrigger": "tempPromptTrigger(code, expireAfter)",
    "tempRegexTrigger": "tempRegexTrigger(regex, code, expireAfter)",
    "tempTimer": "tempTimer(time, code to do[, repeating])",
    "tempTrigger": "tempTrigger(substring, code, expireAfter)",
    "timeframe": "timeframe(vname, true_time, nil_time, ...)",
    "translateTable": "translateTable(directions, [languagecode])",
    "ttsClearQueue": "ttsClearQueue([index])",
    "ttsGetCurrentLine": "ttsGetCurrentLine()",
    "ttsGetCurrentVoice": "ttsGetCurrentVoice()",
    "ttsGetQueue": "ttsGetQueue([index])",
    "ttsGetState": "ttsGetState()",
    "ttsGetVoices": "ttsGetVoices()",
    "ttsPause": "ttsPause()",
    "ttsQueue": "ttsQueue(text to queue, [index])",
    "ttsResume": "ttsResume()",
    "ttsSetPitch": "ttsSetPitch(pitch)",
    "ttsSetRate": "ttsSetRate(rate)",
    "ttsSetVoiceByIndex": "ttsSetVoiceByIndex(index)",
    "ttsSetVoiceByName": "ttsSetVoiceByName(name)",
    "ttsSetVolume": "ttsSetVolume(volume)",
    "ttsSkip": "ttsSkip()",
    "ttsSpeak": "ttsSpeak(text to speak)",
    "unHighlightRoom": "unHighlightRoom(roomID)",
    "uninstallModule": "uninstallModule(name)",
    "uninstallPackage": "uninstallPackage(name)",
    "unzipAsync": "unzipAsync(path, location)",
    "updateMap": "updateMap()",
    "wrapLine": "wrapLine(windowName, lineNumber)"
}
