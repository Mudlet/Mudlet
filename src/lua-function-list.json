{
  "createBuffer": "createBuffer(name)",
  "getFont": "getFont(name)",
  "setLabelReleaseCallback": "setLabelReleaseCallback(labelName, luaFunctionName, optional any amount of arguments)",
  "openWebPage": "openWebPage(URL)",
  "tempBeginOfLineTrigger": "tempBeginOfLineTrigger(part of line, code, expireAfter)",
  "killTrigger": "killTrigger(id)",
  "setAreaUserData": "setAreaUserData(areaID, key (as a string), value (as a string))",
  "ttsGetSpeechQueue": "ttsGetSpeechQueue([index])",
  "handleWindowResizeEvent": "handleWindowResizeEvent()",
  "replaceAll": "replaceAll( what, with )",
  "sendAll": "sendAll(list of things to send, [echo back or not])",
  "display": "display(content)",
  "setRoomChar": "setRoomChar(roomID, character)",
  "saveWindowLayout": "saveWindowLayout",
  "getTimestamp": "getTimestamp( optional console_name, lineNumber )",
  "insertPopup": "insertPopup([windowName], text, {commands}, {hints}, [current or default format])",
  "setBold": "setBold(windowName, boolean)",
  "tempTimer": "tempTimer(time, code to do)",
  "getRoomChar": "getRoomChar(roomID)",
  "setBorderTop": "setBorderTop(size)",
  "tempPromptTrigger": "tempPromptTrigger(code, expireAfter)",
  "getMapLabel": "labelinfo = getMapLabels(areaID, labelID)",
  "clearSpecialExits": "clearSpecialExits(roomID)",
  "ttsSkipSpeech": "ttsSkipSpeech()",
  "removeMapEvent": "removeMapEvent (event name)",
  "resizeWindow": "resizeWindow(name, width, height)",
  "getCurrentLine": "getCurrentLine()",
  "ttsSetVoiceByName": "ttsSetVoiceByName(name)",
  "permBeginOfLineStringTrigger": "permBeginOfLineStringTrigger(name, parent, pattern table, lua code)",
  "permAlias": "permAlias(name, parent, regex, lua code)",
  "setLabelStyleSheet": "setLabelStyleSheet(label, markup)",
  "killAlias": "killAlias(name)",
  "clearWindow": "clearWindow(window_name)",
  "print": "print(text, some more text, ...)",
  "getFgColor": "getFgColor(windowName)",
  "getMudletVersion": "getMudletVersion(style)",
  "tempTrigger": "tempTrigger(substring, code, expireAfter)",
  "getRoomAreaName": "getRoomAreaName(areaID or areaName)",
  "hideToolBar": "hideToolBar(name)",
  "isActive": "isActive(name, type)",
  "permRegexTrigger": "permRegexTrigger(name, parent, pattern table, lua code)",
  "appendBuffer": "appendBuffer(name)",
  "setConsoleBufferSize": "setConsoleBufferSize(consoleName, linesLimit, sizeOfBatchDeletion)",
  "killKey": "killKey(name)",
  "showToolBar": "showToolBar(name)",
  "getAreaUserData": "getAreaUserData(areaID, key)",
  "downloadFile": "downloadFile(saveto, url)",
  "suffix": "suffix(text)",
  "searchRoomUserData": "searchRoomUserData(key, value)",
  "addMapMenu": "addMapMenu(uniquename, parent, display name)",
  "raiseWindow": "raiseWindow([labelName])",
  "isAnsiFgColor": "isAnsiFgColor(ansiFgColorCode)",
  "createGauge": "createGauge(name, width, height, Xpos, Ypos, gaugeText, r, g, b, orientation)",
  "setFont": "setFont(name, font)",
  "setCustomEnvColor": "setCustomEnvColor(environmentID, r,g,b,a)",
  "getRoomExits": "getRoomExits (roomID)",
  "selectCurrentLine": "selectCurrentLine([windowName])",
  "sendTelnetChannel102": "sendTelnetChannel102(msg)",
  "setFgColor": "setFgColor([windowName],r, g, b)",
  "ttsGetVoices": "ttsGetVoices()",
  "setRoomUserData": "setRoomUserData(roomID, key (as a string), value (as a string))",
  "getMudletHomeDir": "getMudletHomeDir()",
  "setHexBgColor": "setHexFgColor([windowName], hexColorString)",
  "getAreaExits": "getAreaExits(areaID, showExits)",
  "updateMap": "updateMap()",
  "lockExit": "lockExit(roomID, direction, lockIfTrue)",
  "createMiniConsole": "createMiniConsole(name, x, y, width, height)",
  "enableTimer": "enableTimer(name)",
  "deleteRoom": "deleteRoom(roomID)",
  "tempComplexRegexTrigger": "tempComplexRegexTrigger(name, regex, code, multiline, foreground color, bg color, filter, match all, highlight foreground color, highlight background color, play sound file, fire length, line delta, expireAfter)",
  "getServerEncodingsList": "getServerEncodingsList()",
  "cinsertText": "cinsertText(window, text)",
  "echoLink": "echoLink([windowName], text, command, hint, [bool use_current_format or defaultLinkFormat])",
  "getMapEvents": "mapevents = getMapEvents()",
  "getAreaTableSwap": "getAreaTableSwap()",
  "getServerEncoding": "getServerEncoding()",
  "insertLink": "insertLink([windowName], text, command, hint, [useDefaultLinkFormat])",
  "getPath": "getPath(roomID from, roomID to)",
  "lockSpecialExit": "lockSpecialExit (from roomID, to roomID, special exit command, lockIfTrue)",
  "startStopWatch": "startStopWatch( watchID )",
  "ttsSetSpeechRate": "ttsSetSpeechRate(rate)",
  "openUserWindow": "openUserWindow(name, [restoreLayout])",
  "getSpecialExitsSwap": "exits = getSpecialExitsSwap(roomID)",
  "getLines": "getLines(from_line_number, to_line_number)",
  "saveProfile": "saveProfile()",
  "getRooms": "rooms = getRooms()",
  "setExitWeight": "setExitWeight(roomID, exitCommand, weight)",
  "createMapLabel": "labelID = createMapLabel(areaID, text, posx, posy, posz, fgRed, fgGreen, fgBlue, bgRed, bgGreen, bgBlue, zoom, fontSize, showOnTop, noScaling)",
  "lockRoom": "lockRoom (roomID, lockIfTrue)",
  "getStopWatchTime": "getStopWatchTime(watchID)",
  "setHexFgColor": "setHexFgColor([windowName], hexColorString)",
  "permGroup": "permGroup(name, itemtype, [parent])",
  "clearMapUserData": "clearMapUserData()",
  "getIrcServer": "getIrcServer()",
  "getGridMode": "getGridMode(areaID)",
  "getFontSize": "getFontSize(name)",
  "clearMapUserDataItem": "clearUserDataItem(mapID, key)",
  "replaceWildcard": "replaceWildcard(which, replacement)",
  "setFontSize": "setFontSize(name, size)",
  "getAllRoomEntrances": "getAllRoomEntrances(roomID)",
  "getMousePosition": "getMousePosition()",
  "setBackgroundImage": "setBackgroundImage(labelName, imageLocation)",
  "setGridMode": "setGridMode(areaID, true/false)",
  "getBgColor": "getBgColor(windowName)",
  "creplaceLine": "creplaceLine (text)",
  "permTimer": "permTimer(name, parent, seconds, lua code)",
  "loadMap": "boolean = loadMap(file location)",
  "isAnsiBgColor": "isAnsiBgColor(ansiBgColorCode)",
  "resetFormat": "resetFormat()",
  "deleteLine": "deleteLine([windowName])",
  "selectSection": "selectSection(from, how long)",
  "getNetworkLatency": "getNetworkLatency()",
  "loadWindowLayout": "loadWindowLayout",
  "removeSpecialExit": "removeSpecialExit(roomID, command)",
  "closeMudlet": "closeMudlet()",
  "clearAreaUserData": "clearAreaUserData(areaID)",
  "disconnect": "disconnect()",
  "setItalics": "setItalics(windowName, bool)",
  "exportAreaImage": "exportAreaImage(areaID)",
  "getAllMapUserData": "getAllMapUserData()",
  "unHighlightRoom": "unHighlightRoom(roomID)",
  "ansi2decho": "ansi2decho(text, default_colour)",
  "disableTimer": "disableTimer(name)",
  "copy": "copy([windowName])",
  "resetProfile": "resetProfile()",
  "sendSocket": "sendSocket(data)",
  "clearUserWindow": "clearUserWindow(name)",
  "addRoom": "addRoom(roomID)",
  "setMapUserData": "setMapUserData(key (as a string), value (as a string))",
  "ttsGetCurrentLine": "ttsGetCurrentLine()",
  "setExitStub": "setExitStub(roomID, direction, set/unset)",
  "getRoomsByPosition": "getRoomsByPosition(areaID, x,y,z)",
  "exists": "exists(name, type)",
  "getAreaTable": "getAreaTable()",
  "setMiniConsoleFontSize": "setTextFormat(windowName, r1, g1, b1, r2, g2, b2, bold, underline, italics[, strikeout])",
  "invokeFileDialog": "invokeFileDialog(fileOrFolder, dialogTitle)",
  "getAvailableFonts": "getAvailableFonts()",
  "tempLineTrigger": "tempLineTrigger(from, howMany, code, expireAfter)",
  "resetStopWatch": "resetStopWatch(watchID)",
  "echo": "echo([miniconsoleName or labelName], text)",
  "raiseEvent": "raiseEvent(event_name, arg-1, â€¦ arg-n)",
  "prefix": "prefix(text)",
  "replace": "replace([windowName,] with[, keepcolor])",
  "createButton": "createConsole(consoleName, fontSize, charsPerLine, numberOfLines, Xpos, Ypos)",
  "createRoomID": "usableId = createRoomID([minimumStartingRoomId])",
  "centerview": "centerview (roomID)",
  "getRowCount": "getRowCount([window])",
  "getIrcChannels": "getIrcChannels()",
  "showCaptureGroups": "showCaptureGroups()",
  "addSpecialExit": "addSpecialExit(roomIDFrom, roomIDTo, command)",
  "clearRoomUserDataItem": "clearRoomUserDataItem(roomID, key)",
  "paste": "paste(windowName)",
  "clearRoomUserData": "clearRoomUserData(roomID)",
  "disableAlias": "disableAlias(name)",
  "getModulePath": "path = getModulePath(module name)",
  "clearCmdLine": "clearCmdLine()",
  "setRoomEnv": "setRoomEnv(roomID, newEnvID)",
  "cechoLink": "cechoLink([windowName], text, command, hint, true)",
  "dechoLink": "dechoLink([windowName], text, command, hint, true)",
  "getDoors": "doors = getDoors(roomID)",
  "setMapZoom": "setMapZoom(zoom)",
  "hechoLink": "hechoLink([windowName], text, command, hint, true)",
  "echoPopup": "echoPopup([window], text, {commands}, {hints}, [current or default format])",
  "getRoomName": "roomName = getRoomName(roomID)",
  "uninstallPackage": "uninstallPackage(name)",
  "uninstallModule": "uninstallModule(name)",
  "permSubstringTrigger": "permSubstringTrigger( name, parent, pattern table, lua code )",
  "showMultimatches": "showMultimatches()",
  "getCustomLines": "getCustomLines(roomID)",
  "enableTrigger": "enableTrigger(name)",
  "ttsSetSpeechVolume": "ttsSetSpeechVolume(volume)",
  "selectString": "selectString( [windowName], text, number_of_match )",
  "ttsResumeSpeech": "ttsResumeSpeech()",
  "startLogging": "startLogging(state)",
  "ttsQueueSpeech": "ttsQueueSpeech(text to queue, [index])",
  "getRoomEnv": "envID = getRoomEnv(roomID)",
  "getSpecialExits": "exits = getSpecialExits(roomID)",
  "getColumnNumber": "getColumnNumber([window])",
  "ttsPauseSpeech": "ttsPauseSpeech()",
  "getMainWindowSize": "getMainWindowSize()",
  "ttsGetState": "ttsGetSpeechState()",
  "registerAnonymousEventHandler": "id = registerAnonymousEventHandler(event name, function[, one shot])",
  "disableTrigger": "disableTrigger(name)",
  "setMainWindowSize": "setMainWindowSize(mainWidth, mainHeight)",
  "ttsGetCurrentVoice": "ttsGetCurrentVoice()",
  "setExit": "setExit(from roomID, to roomID, direction)",
  "enableAlias": "enableAlias(name)",
  "gotoRoom": "gotoRoom (roomID)",
  "ttsClearQueue": "ttsClearQueue([index])",
  "timeframe": "timeframe(vname, true_time, nil_time, ...)",
  "tempRegexTrigger": "tempRegexTrigger(regex, code, expireAfter)",
  "tempKey": "tempKey(<i>modifier</i>, key code, lua code)",
  "setRoomIDbyHash": "setRoomIDbyHash(roomID, hash)",
  "tempExactMatchTrigger": "tempExactMatchTrigger(exact line, code, expireAfter)",
  "tempColorTrigger": "tempColorTrigger(foregroundColor, backgroundColor, code, expireAfter)",
  "getTime": "getTime(returntype, format)",
  "tempButtonToolbar": "tempButtonToolbar(name, location, orientation)",
  "tempButton": "tempButton(toolbar name, button text, orientation)",
  "tempAlias": "aliasID = tempAlias(regex, code to do)",
  "denyCurrentSend": "denyCurrentSend()",
  "stopStopWatch": "stopStopWatch( watchID )",
  "getMainConsoleWidth": "getMainConsoleWidth()",
  "reconnect": "reconnect()",
  "openUrl": "openUrl (url)",
  "hecho": "hecho(window, text)",
  "setIrcNick": "setIrcNick( nickname )",
  "printCmdLine": "printCmdLine(text)",
  "cecho": "cecho(window, text)",
  "decho": "decho ([name of console,] text)",
  "speedwalk": "speedwalk(dirString, backwards, delay)",
  "spawn": "spawn(readFunction, processToSpawn[, ...arguments])",
  "showWindow": "showWindow(name)",
  "moveCursor": "moveCursor([windowName], x, y)",
  "ttsSpeak": "ttsSpeak(text to speak)",
  "calcFontSize": "calcFontSize(window_or_fontsize)",
  "showColors": "showColors(columns, filterColor)",
  "shms": "shms( seconds, bool )",
  "raiseGlobalEvent": "raiseGlobalEvent(event_name, arg-1, â€¦ arg-n)",
  "createMapper": "createMapper(x, y, width, height)",
  "killAnonymousEventHandler": "killAnonymousEventHandler(handler id)",
  "setWindowWrap": "setWindowWrap(windowName, wrapAt)",
  "echoUserWindow": "echoUserWindow(windowName)",
  "setTriggerStayOpen": "setTriggerStayOpen(name, number)",
  "fg": "fg([window, ]colorName)",
  "reloadModule": "reloadModule(module name)",
  "setStrikeOut": "setStrikeOut(windowName, boolean)",
  "killTimer": "killTimer(id)",
  "bg": "bg([window, ]colorName)",
  "setServerEncoding": "setServerEncoding(encoding)",
  "setLabelWheelCallback": "setLabelWheelCallback(labelName, luaFunctionName, optional any amount of arguments)",
  "setRoomName": "setRoomName(roomID, newName)",
  "installModule": "installModule(location)",
  "setRoomCoordinates": "setRoomCoordinates(roomID, x, y, z)",
  "getCmdLine": "getCmdLine()",
  "disableScrollBar": "disableScrollBar(windowName)",
  "deleteMapLabel": "deleteMapLabel(areaID, labelID)",
  "setPopup": "setPopup(name, {lua code}, {hints})",
  "setModulePriority": "setModulePriority(moduleName, priority)",
  "playSoundFile": "playSoundFile(fileName, volume)",
  "setLink": "setLink([window, ]command, tooltip)",
  "setRoomWeight": "setRoomWeight(roomID, weight)",
  "getModulePriority": "priority = getModulePriority(module name)",
  "setLabelOnEnter": "setLabelOnEnter(labelName, luaFunctionName, optional any amount of arguments)",
  "setLabelMoveCallback": "setLabelMoveCallback(labelName, luaFunctionName, optional any amount of arguments)",
  "clearAreaUserDataItem": "clearAreaUserDataItem(areaID, key)",
  "getLineNumber": "getLineNumber([window])",
  "getCustomEnvColorTable": "envcolors = getCustomEnvColorTable()",
  "setLabelClickCallback": "setLabelClickCallback(labelName, luaFunctionName, [any arguments])",
  "getExitStubs1": "stubs = getExitStubs1(roomid)",
  "setIrcServer": "setIrcServer( hostname, port )",
  "hasExitLock": "status = hasExitLock(roomID, direction)",
  "setIrcChannels": "setIrcChannels( channels )",
  "setGaugeText": "setGaugeText(gaugename, css, ccstext )",
  "hasFocus": "hasFocus()",
  "enableKey": "enableKey(name)",
  "expandAlias": "expandAlias(command, true/false)",
  "setGaugeStyleSheet": "setGaugeStyleSheet(gaugeName, css, cssback, csstext)",
  "ioprint": "ioprint(text, some more text, ...)",
  "getColorWildcard": "getColorWildcard(ansi color number)",
  "hasSpecialExitLock": "status = hasSpecialExitLock(from roomID, to roomID, command)",
  "getRoomWeight": "room weight = getRoomWeight(roomID)",
  "ttsSetVoiceByIndex": "ttsSetVoiceByIndex(index)",
  "insertText": "insertText([windowName], text)",
  "setButtonStyleSheet": "setButtonStyleSheet(button, markup)",
  "getMapLabels": "arealabels = getMapLabels(areaID)",
  "roomLocked": "locked = roomLocked(roomID)",
  "setDoor": "setDoor(roomID, exitCommand, doorStatus)",
  "stopSounds": "stopSounds()",
  "setGauge": "setGauge(gaugeName, currentValue, maxValue, gaugeText)",
  "installPackage": "installPackage(location)",
  "searchAreaUserData": "searchRoom (room name / room number)",
  "createStopWatch": "createStopWatch()",
  "getEpoch": "getEpoch()",
  "setBorderBottom": "setBorderBottom(size)",
  "getMapUserData": "getMapUserData( key )",
  "getExitStubs": "stubs = getExitStubs(roomid)",
  "setBorderRight": "setBorderRight(size)",
  "getRoomUserDataKeys": "getRoomUserDataKeys(roomID)",
  "deleteArea": "deleteArea(areaID or areaName)",
  "getMudletLuaDefaultPaths": "getMudletLuaDefaultPaths()",
  "selectCaptureGroup": "selectCaptureGroup(groupNumber)",
  "appendCmdLine": "appendCmdLine()",
  "setBorderLeft": "setBorderLeft(size)",
  "setBorderColor": "setBorderColor(r, g, b)",
  "lowerWindow": "lowerWindow(labelName)",
  "addCustomLine": "addCustomLine(roomID, id_to, direction, style, color, arrow)",
  "setBgColor": "setBgColor([windowName], r,g,b )",
  "getRoomCoordinates": "x, y, z = getRoomCoordinates(room ID)",
  "moveWindow": "moveWindow( name, x, y )",
  "resetRoomArea": "resetRoomArea (areaID)",
  "setBackgroundColor": "setBackgroundColor(window, red, green, blue, transparency)",
  "connectToServer": "connectToServer(host, port, [save])",
  "setAreaName": "setAreaName(areaID or areaName, newName)",
  "moveGauge": "moveGauge(gaugeName, newX, newY)",
  "setAppStyleSheet": "setAppStyleSheet(stylesheet)",
  "getButtonState": "getButtonState()",
  "setLabelOnLeave": "setLabelClickCallback(labelName, luaFunctionName, optional any amount of arguments)",
  "sendIrc": "sendIrc(target, message)",
  "sendGMCP": "sendGMCP(command)",
  "getExitWeights": "weights = getExitWeights(roomid)",
  "permKey": "permKey(name, parent, [modifier], key code, lua code)",
  "send": "send(command, showOnScreen)",
  "ttsSetSpeechPitch": "ttsSetSpeechPitch(pitch)",
  "hideWindow": "hideWindow(name)",
  "createMapImageLabel": "labelID = createMapImageLabel(areaID, filePath, posx, posy, posz, width, height, zoom, showOnTop)",
  "saveMap": "saveMap(location)",
  "getProfileName": "name = getProfileName()",
  "setRoomArea": "setRoomArea(roomID, newAreaID or newAreaName)",
  "roomExists": "roomExists(roomID)",
  "getAllRoomUserData": "getAllRoomUserData(roomID)",
  "getRoomUserData": "getRoomUserData(roomID, key)",
  "getIrcNick": "getIrcNick()",
  "highlightRoom": "highlightRoom( roomID, color1Red, color1Green, color1Blue, color2Red, color2Green, color2Blue, highlightRadius, color1Alpha, color2Alpha)",
  "isPrompt": "isPrompt()",
  "connectExitStub": "connectExitStub(fromID, direction or toID[, optional direction])",
  "setUnderline": "setUnderline(windowName, bool)",
  "getRoomIDbyHash": "roomID = getRoomIDbyHash(hash)",
  "getRoomHashByID": "hash = getRoomHashByID(roomId)",
  "setMergeTables": "setMergeTables(module)",
  "getLastLineNumber": "getLastLineNumber(window)",
  "addSupportedTelnetOption": "addSupportedTelnetOption(option)",
  "getAreaRooms": "getAreaRooms(area id)",
  "moveCursorEnd": "moveCursorEnd( windowName )",
  "addMapEvent": "addMapEvent(uniquename, event name, parent, display name, arguments)",
  "debugc": "debugc(content)",
  "createLabel": "createLabel(name, Xpos, Ypos, width, height, fillBackground)",
  "getIrcConnectedHost": "getIrcConnectedHost()",
  "restartIrc": "restartIrc()",
  "mudletOlderThan": "mudletOlderThan(major, [minor], [patch])",
  "deselect": "deselect([window name])",
  "sendATCP": "sendATCP(message, what)",
  "sendMSDP": "sendMSDP(variable[, value][, value...])",
  "getLineCount": "getLineCount()",
  "wrapLine": "wrapLine(windowName, lineNumber)",
  "feedTriggers": "feedTriggers(text)",
  "getColumnCount": "getColumnCount([window])",
  "disableKey": "disableKey(name)",
  "enableScrollBar": "enableScrollBar(windowName)",
  "addAreaName": "areaID = addAreaName(areaName)",
  "getRoomArea": "areaID = getRoomArea(roomID)",
  "alert": "alert([seconds])",
  "setLabelDoubleClickCallback": "setLabelDoubleClickCallback(labelName, luaFunctionName, optional any amount of arguments)"
}
