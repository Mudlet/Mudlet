{
    "createBuffer": "createBuffer(name)",
    "getFont": "getFont(name)",
    "setLabelReleaseCallback": "setLabelReleaseCallback(labelName, luaFunctionName, optional any amount of arguments)",
    "openWebPage": "openWebPage(URL)",
    "tempBeginOfLineTrigger": "tempBeginOfLineTrigger(part of line, code to do)",
    "killTrigger": "killTrigger(id)",
    "setAreaUserData": "setAreaUserData(areaID, key (as a string), value (as a string))",
    "handleWindowResizeEvent": "handleWindowResizeEvent()",
    "replaceAll": "replaceAll( what, with )",
    "sendAll": "sendAll(list of things to send, [echo back or not])",
    "searchAreaUserData": "searchRoom (room name / room number)",
    "setRoomChar": "setRoomChar(roomID, character)",
    "saveWindowLayout": "saveWindowLayout",
    "getTimestamp": "getTimestamp( optional console_name, lineNumber )",
    "insertPopup": "insertPopup([windowName], text, {commands}, {hints}, [current or default format])",
    "setBold": "setBold(windowName, boolean)",
    "tempTimer": "tempTimer(time, code to do)",
    "getRoomChar": "getRoomChar(roomID)",
    "setBorderTop": "setBorderTop(size)",
    "tempPromptTrigger": "tempLineTrigger(code to do)",
    "getMapLabel": "labelinfo = getMapLabels(areaID, labelID)",
    "clearSpecialExits": "clearSpecialExits(roomID)",
    "removeMapEvent": "removeMapEvent (event name)",
    "resizeWindow": "resizeWindow(name,width,height)",
    "connectToServer": "connectToServer(host, port, <i>save</i>)",
    "permBeginOfLineStringTrigger": "permBeginOfLineStringTrigger(name, parent, pattern table, lua code)",
    "permAlias": "permAlias(name, parent, regex, lua code)",
    "setLabelStyleSheet": "setLabelStyleSheet(label, markup)",
    "killAlias": "killAlias(name)",
    "clearWindow": "clearWindow(window_name)",
    "print": "print(text, some more text, ...)",
    "getFgColor": "getFgColor(windowName)",
    "getMudletVersion": "getMudletVersion(style)",
    "tempTrigger": "tempTrigger(substring, code to do)",
    "getRoomAreaName": "getRoomAreaName(areaID or areaName)",
    "hideToolBar": "hideToolBar(name)",
    "isActive": "isActive(name, type)",
    "permRegexTrigger": "permRegexTrigger(name, parent, pattern table, lua code)",
    "appendBuffer": "appendBuffer(name)",
    "setConsoleBufferSize": "setConsoleBufferSize( consoleName, linesLimit, sizeOfBatchDeletion )",
    "killKey": "killKey(name)",
    "showToolBar": "showToolBar(name)",
    "getAreaUserData": "getAreaUserData(areaID, key)",
    "downloadFile": "downloadFile(saveto, url)",
    "suffix": "suffix(text)",
    "searchRoomUserData": "searchRoomUserData(key, value)",
    "addMapMenu": "addMapMenu(uniquename, parent, display name)",
    "raiseWindow": "raiseWindow([labelName])",
    "isAnsiFgColor": "isAnsiFgColor(ansiFgColorCode)",
    "createGauge": "createGauge(name, width, height, Xpos, Ypos, gaugeText, r, g, b, orientation)",
    "setFont": "setFont(name, font)",
    "setCustomEnvColor": "setCustomEnvColor(environmentID, r,g,b,a)",
    "getRoomExits": "getRoomExits (roomID)",
    "selectCurrentLine": "selectCurrentLine([windowName])",
    "sendTelnetChannel102": "sendTelnetChannel102(msg)",
    "setFgColor": "setFgColor([windowName],r, g, b)",
    "setRoomUserData": "setRoomUserData(roomID, key (as a string), value (as a string))",
    "getMudletHomeDir": "getMudletHomeDir()",
    "setHexBgColor": "setHexFgColor([windowName], hexColorString)",
    "debugc": "debugc( content )",
    "updateMap": "updateMap()",
    "lockExit": "lockExit(roomID, direction, lock = true/false)",
    "createMiniConsole": "createMiniConsole(name, x, y, width, height)",
    "enableTimer": "enableTimer(name)",
    "deleteRoom": "deleteRoom(roomID)",
    "tempComplexRegexTrigger": "tempComplexRegexTrigger('name', regex, code to do, multiline, foreground color, bg color, filter, match all, highlight foreground color, highlight background color, play sound file, fire length, line delta)",
    "getServerEncodingsList": "getServerEncodingsList()",
    "getIrcConnectedHost": "getIrcConnectedHost()",
    "echoLink": "echoLink([windowName], text, command, hint, [bool use_current_format or defaultLinkFormat])",
    "getMapEvents": "mapevents = getMapEvents()",
    "getAreaTableSwap": "getAreaTableSwap()",
    "getServerEncoding": "getServerEncoding()",
    "insertLink": "insertLink([windowName], text, command, hint, [useDefaultLinkFormat])",
    "getPath": "getPath(roomID from, roomID to)",
    "lockSpecialExit": "lockSpecialExit (from roomID, to roomID, special exit command, lock = true/false)",
    "startStopWatch": "startStopWatch( watchID )",
    "openUserWindow": "openUserWindow(name, <i>restoreLayout</i>)",
    "getSpecialExitsSwap": "exits = getSpecialExitsSwap(roomID)",
    "getLines": "getLines(from_line_number, to_line_number)",
    "saveProfile": "saveProfile()",
    "getRooms": "rooms = getRooms()",
    "setExitWeight": "setExitWeight(roomID, exitCommand, weight)",
    "createMapLabel": "labelID = createMapLabel(areaID, text, posx, posy, posz, fgRed, fgGreen, fgBlue, bgRed, bgGreen, bgBlue, zoom, fontSize, showOnTop, noScaling)",
    "getAllRoomUserData": "getAllRoomUserData(roomID)",
    "getStopWatchTime": "getStopWatchTime(watchID)",
    "setHexFgColor": "setHexFgColor([windowName], hexColorString)",
    "permGroup": "permGroup(name, itemtype, <i>parent</i>)",
    "clearMapUserData": "clearMapUserData()",
    "getIrcServer": "getIrcServer()",
    "playSoundFile": "playSoundFile(fileName, volume)",
    "getFontSize": "getFontSize(name)",
    "clearMapUserDataItem": "clearUserDataItem(mapID,key)",
    "replaceWildcard": "replaceWildcard(which, replacement)",
    "setFontSize": "setFontSize(name, size)",
    "getAllRoomEntrances": "getAllRoomEntrances(roomID)",
    "addAreaName": "areaID = addAreaName(areaName)",
    "setBackgroundImage": "setBackgroundImage(labelName, imageLocation)",
    "setGridMode": "setGridMode(areaID, true/false)",
    "getBgColor": "getBgColor(windowName)",
    "creplaceLine": "creplaceLine (text)",
    "permTimer": "permTimer(name, parent, seconds, lua code)",
    "loadMap": "boolean = loadMap(file location)",
    "isAnsiBgColor": "isAnsiBgColor(ansiBgColorCode)",
    "resetFormat": "resetFormat()",
    "deleteLine": "deleteLine([optional windowName])",
    "selectSection": "selectSection(from, how long)",
    "getNetworkLatency": "getNetworkLatency()",
    "loadWindowLayout": "loadWindowLayout",
    "removeSpecialExit": "removeSpecialExit(roomID, command)",
    "closeMudlet": "closeMudlet()",
    "clearAreaUserData": "clearAreaUserData(areaID)",
    "disconnect": "disconnect()",
    "setItalics": "setItalics(windowName, bool)",
    "exportAreaImage": "exportAreaImage(areaID)",
    "getAllMapUserData": "getAllMapUserData()",
    "unHighlightRoom": "unHighlightRoom(roomID)",
    "ansi2decho": "ansi2decho(text, default_colour)",
    "disableTimer": "disableTimer(name)",
    "copy": "copy([windowName])",
    "resetProfile": "resetProfile()",
    "roomLocked": "locked = roomLocked(roomID)",
    "clearUserWindow": "clearUserWindow(name)",
    "addRoom": "addRoom(roomID)",
    "setMapUserData": "setMapUserData(key (as a string), value (as a string))",
    "setExitStub": "setExitStub(roomID, direction, set/unset)",
    "getRoomsByPosition": "getRoomsByPosition(areaID, x,y,z)",
    "exists": "exists(name, type)",
    "getAreaTable": "getAreaTable()",
    "setMiniConsoleFontSize": "setTextFormat(windowName, r1, g1, b1, r2, g2, b2, bold, underline, italics[, strikeout])",
    "invokeFileDialog": "invokeFileDialog(fileOrFolder, dialogTitle)",
    "getMapUserData": "getMapUserData( key )",
    "tempLineTrigger": "tempLineTrigger(from, howMany, code to do)",
    "resetStopWatch": "resetStopWatch(watchID)",
    "echo": "echo([miniconsole or label], text)",
    "raiseEvent": "raiseEvent(event_name, arg-1, â€¦ arg-n)",
    "prefix": "prefix(text)",
    "replace": "replace([windowName,] with[, keepcolor])",
    "createButton": "createConsole(consoleName, fontSize, charsPerLine, numberOfLines, Xpos, Ypos)",
    "createRoomID": "usableId = createRoomID([minimumStartingRoomId])",
    "centerview": "centerview (roomID)",
    "getRowCount": "getRowCount([window])",
    "getIrcChannels": "getIrcChannels()",
    "showCaptureGroups": "showCaptureGroups()",
    "addSpecialExit": "addSpecialExit(roomIDFrom, roomIDTo, command)",
    "clearRoomUserDataItem": "clearRoomUserDataItem(roomID,key)",
    "paste": "paste(windowName)",
    "clearRoomUserData": "clearRoomUserData(roomID)",
    "disableAlias": "disableAlias(name)",
    "getModulePath": "path = getModulePath(module name)",
    "clearCmdLine": "clearCmdLine()",
    "setRoomEnv": "setRoomEnv(roomID, newEnvID)",
    "cechoLink": "cechoLink([windowName], text, command, hint, true)",
    "dechoLink": "dechoLink([windowName], text, command, hint, true)",
    "getDoors": "doors = getDoors(roomID)",
    "setMapZoom": "setMapZoom(zoom)",
    "hechoLink": "hechoLink([windowName], text, command, hint, true)",
    "sendIrc": "sendIrc(target, message)",
    "permSubstringTrigger": "permSubstringTrigger( name, parent, pattern table, lua code )",
    "getCustomLines": "getCustomLines(roomID)",
    "startLogging": "startLogging(state)",
    "getRoomEnv": "envID = getRoomEnv(roomID)",
    "getSpecialExits": "exits = getSpecialExits(roomID)",
    "getColumnNumber": "getColumnNumber([window])",
    "getMainWindowSize": "getMainWindowSize()",
    "registerAnonymousEventHandler": "id = registerAnonymousEventHandler(event name, function[, one shot])",
    "disableTrigger": "disableTrigger(name)",
    "setMainWindowSize": "setMainWindowSize(mainWidth, mainHeight)",
    "setExit": "setExit(from roomID, to roomID, direction)",
    "enableAlias": "enableAlias(name)",
    "gotoRoom": "gotoRoom (roomID)",
    "ioprint": "ioprint(text, some more text, ...)",
    "uninstallPackage": "uninstallPackage(name)",
    "uninstallModule": "uninstallModule(name)",
    "timeframe": "timeframe(vname, true_time, nil_time, ...)",
    "setRoomIDbyHash": "setRoomIDbyHash(roomID, hash)",
    "tempRegexTrigger": "tempRegexTrigger(regex, code to do)",
    "tempKey": "tempKey(<i>modifier</i>, key code, lua code)",
    "getTime": "getTime(returntype, format)",
    "tempExactMatchTrigger": "tempExactMatchTrigger(exact line, code to do)",
    "tempColorTrigger": "tempColorTrigger(foregroundColor, backgroundColor, code to do)",
    "tempButtonToolbar": "tempButtonToolbar(name, location, orientation)",
    "denyCurrentSend": "denyCurrentSend()",
    "tempButton": "tempButton(toolbar name, button text, orientation)",
    "mudletOlderThan": "mudletOlderThan(major, <i>minor</i>, <i>patch</i>)",
    "reconnect": "reconnect()",
    "tempAlias": "aliasID = tempAlias(regex, code to do)",
    "getExitWeights": "weights = getExitWeights(roomid)",
    "setIrcNick": "setIrcNick( nickname )",
    "printCmdLine": "printCmdLine(text)",
    "cecho": "cecho(window, text)",
    "decho": "decho ([name of console,] text)",
    "stopStopWatch": "stopStopWatch( watchID )",
    "getMousePosition": "getMousePosition()",
    "speedwalk": "speedwalk(dirString, backwards, delay)",
    "moveCursor": "moveCursor([optional windowName], x, y)",
    "spawn": "spawn(read function, process to spawn[, ...arguments])",
    "calcFontSize": "calcFontSize(fontSize)",
    "showWindow": "showWindow(name)",
    "showMultimatches": "showMultimatches()",
    "raiseGlobalEvent": "raiseGlobalEvent(event_name, arg-1, â€¦ arg-n)",
    "createMapper": "createMapper(x, y, width, height)",
    "addSupportedTelnetOption": "addSupportedTelnetOption(option)",
    "showColors": "showColors(columns, filterColor)",
    "shms": "shms( seconds, bool )",
    "setWindowWrap": "setWindowWrap(windowName, wrapAt)",
    "fg": "fg([window, ]colorName)",
    "reloadModule": "reloadModule(module name)",
    "connectExitStub": "connectExitStub(fromID, direction or toID[, optional direction])",
    "killTimer": "killTimer(id)",
    "bg": "bg([window, ]colorName)",
    "setTriggerStayOpen": "setTriggerStayOpen(name, number)",
    "setStrikeOut": "setStrikeOut(windowName, boolean)",
    "setServerEncoding": "setServerEncoding(encoding)",
    "installModule": "installModule(location)",
    "cinsertText": "cinsertText(window, text)",
    "getCmdLine": "getCmdLine()",
    "getRoomCoordinates": "x,y,z = getRoomCoordinates(room ID)",
    "setRoomName": "setRoomName(roomID, newName)",
    "setRoomCoordinates": "setRoomCoordinates(roomID, x, y, z)",
    "deleteMapLabel": "deleteMapLabel(areaID, labelID)",
    "setPopup": "setPopup(name, {lua code}, {hints})",
    "setModulePriority": "setModulePriority(module name, priority #)",
    "setRoomWeight": "setRoomWeight(roomID, weight)",
    "setLink": "setLink([window, ]command, tooltip)",
    "setLabelWheelCallback": "setLabelWheelCallback(labelName, luaFunctionName, optional any amount of arguments)",
    "setAppStyleSheet": "setAppStyleSheet(stylesheet)",
    "clearAreaUserDataItem": "clearAreaUserDataItem(areaID,key)",
    "setLabelOnEnter": "setLabelOnEnter(labelName, luaFunctionName, optional any amount of arguments)",
    "getCustomEnvColorTable": "envcolors = getCustomEnvColorTable()",
    "setLabelMoveCallback": "setLabelMoveCallback(labelName, luaFunctionName, optional any amount of arguments)",
    "getExitStubs1": "stubs = getExitStubs1(roomid)",
    "getLineNumber": "getLineNumber([window])",
    "hasExitLock": "status = hasExitLock(roomID, direction)",
    "setLabelClickCallback": "setLabelClickCallback(labelName, luaFunctionName, optional any amount of arguments)",
    "setIrcServer": "setIrcServer( hostname, port )",
    "hasFocus": "hasFocus()",
    "setIrcChannels": "setIrcChannels( channels )",
    "expandAlias": "expandAlias(command, true/false)",
    "enableKey": "enableKey(name)",
    "setGaugeText": "setGaugeText(gaugename, css, ccstext )",
    "setGaugeStyleSheet": "setGaugeStyleSheet(gaugeName, css, cssback, csstext)",
    "killAnonymousEventHandler": "killAnonymousEventHandler(handler id)",
    "getRoomWeight": "room weight = getRoomWeight(roomID)",
    "getRoomUserData": "getRoomUserData(roomID, key)",
    "insertText": "insertText([optional windowName], text)",
    "hasSpecialExitLock": "status = hasSpecialExitLock(from roomID, to roomID, command)",
    "getMapLabels": "arealabels = getMapLabels(areaID)",
    "enableTrigger": "enableTrigger(name)",
    "getRoomUserDataKeys": "getRoomUserDataKeys(roomID)",
    "stopSounds": "stopSounds()",
    "setGauge": "setGauge(gaugeName, currentValue, maxValue, gaugeText)",
    "installPackage": "installPackage(location)",
    "openUrl": "openUrl (url)",
    "setDoor": "setDoor(roomID, exitCommand, doorStatus)",
    "createStopWatch": "createStopWatch()",
    "display": "display( content )",
    "getEpoch": "getEpoch()",
    "getExitStubs": "stubs = getExitStubs(roomid)",
    "setButtonStyleSheet": "setButtonStyleSheet(button, markup)",
    "feedTriggers": "feedTriggers(text)",
    "deleteArea": "deleteArea(areaID or areaName)",
    "getRoomArea": "areaID = getRoomArea(roomID)",
    "selectCaptureGroup": "selectCaptureGroup(groupNumber)",
    "enableScrollBar": "enableScrollBar(windowName)",
    "setBorderLeft": "setBorderLeft(size)",
    "setBorderRight": "setBorderRight(size)",
    "lowerWindow": "lowerWindow(labelName)",
    "addCustomLine": "addCustomLine(roomID, id_to, direction, style, color, arrow)",
    "setBorderColor": "setBorderColor(r,g,b)",
    "setBorderBottom": "setBorderBottom(size)",
    "moveWindow": "moveWindow( name, x, y )",
    "resetRoomArea": "resetRoomArea (areaID)",
    "setBgColor": "setBgColor([windowName], r,g,b )",
    "getCurrentLine": "getCurrentLine()",
    "setBackgroundColor": "setBackgroundColor(labelName, red, green, blue, transparency)",
    "moveGauge": "moveGauge(gaugeName, newX, newY)",
    "setAreaName": "setAreaName(areaID or areaName, newName)",
    "getButtonState": "getButtonState()",
    "setLabelOnLeave": "setLabelClickCallback(labelName, luaFunctionName, optional any amount of arguments)",
    "sendSocket": "sendSocket(data)",
    "echoPopup": "echoPopup([window], text, {commands}, {hints}, [current or default format])",
    "deselect": "deselect([optional window name])",
    "permKey": "permKey(name, parent, <i>modifier</i>, key code, lua code)",
    "sendGMCP": "sendGMCP(command)",
    "appendCmdLine": "appendCmdLine()",
    "send": "send( command, show on screen )",
    "selectString": "selectString( [windowName], text, number_of_match )",
    "createMapImageLabel": "labelID = createMapImageLabel(areaID, filePath, posx, posy, posz, width, height, zoom, showOnTop)",
    "getProfileName": "name = getProfileName()",
    "setRoomArea": "setRoomArea(roomID, newAreaID or newAreaName)",
    "saveMap": "saveMap(location)",
    "roomExists": "roomExists(roomID)",
    "getIrcNick": "getIrcNick()",
    "isPrompt": "isPrompt()",
    "highlightRoom": "highlightRoom( roomID, color1Red, color1Green, color1Blue, color2Red, color2Green, color2Blue, highlightRadius, color1Alpha, color2Alpha)",
    "getMainConsoleWidth": "getMainConsoleWidth()",
    "echoUserWindow": "echoUserWindow(windowName)",
    "setUnderline": "setUnderline(windowName, bool)",
    "getRoomIDbyHash": "roomID = getRoomIDbyHash(hash)",
    "setMergeTables": "setMergeTables(module)",
    "getLastLineNumber": "getLastLineNumber(window)",
    "getAreaExits": "getAreaExits(areaID, showExits)",
    "getAreaRooms": "getAreaRooms(area id)",
    "moveCursorEnd": "moveCursorEnd( windowName )",
    "addMapEvent": "addMapEvent(uniquename, event name, parent, display name, arguments)",
    "getColorWildcard": "getColorWildcard(ansi color number)",
    "createLabel": "createLabel(name, Xpos, Ypos, width, height, fillBackground)",
    "disableScrollBar": "disableScrollBar(windowName)",
    "restartIrc": "restartIrc()",
    "hideWindow": "hideWindow(name)",
    "lockRoom": "lockRoom (roomID, lock = true/false)",
    "sendATCP": "sendATCP(message, what)",
    "sendMSDP": "sendMSDP(variable[, value][, value...])",
    "getLineCount": "getLineCount()",
    "wrapLine": "wrapLine(windowName, lineNumber)",
    "getRoomName": "roomName = getRoomName(roomID)",
    "getColumnCount": "getColumnCount([window])",
    "disableKey": "disableKey(name)",
    "getMudletLuaDefaultPaths": "getMudletLuaDefaultPaths()",
    "hecho": "hecho(window, text)",
    "getModulePriority": "priority = getModulePriority(module name)",
    "alert": "alert(<i>seconds</i>)",
    "setLabelDoubleClickCallback": "setLabelDoubleClickCallback(labelName, luaFunctionName, optional any amount of arguments)"
}
